/*
 * DijkstraView.java
 */

package dijkstra;

import java.util.ArrayList;
import java.io.*;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

enum DrawType {
    NODES, EDGES, NODRAW
}

enum StateAlgorithm {
    UNLOCK, LOCK, SOLVED
}

/**
 * The application's main frame.
 */
public class DijkstraView extends FrameView {

    public DijkstraView(SingleFrameApplication app) {
        super(app);
        initComponents();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = DijkstraApp.getApplication().getMainFrame();
            aboutBox = new DijkstraAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        DijkstraApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        pnButton = new javax.swing.JPanel();
        btnNode = new javax.swing.JButton();
        btnEdge = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnEnd = new javax.swing.JButton();
        btnStep = new javax.swing.JButton();
        btnSolve = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        /*
        pnGraph = new javax.swing.JPanel();
        */pnGraph = new jPaintPanel();
        jTextStatus = new javax.swing.JTextField();
        pnSolution = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSolution = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        jSeparator = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        jOpenFileChooser = new javax.swing.JFileChooser();
        jSaveFileChooser = new javax.swing.JFileChooser();

        mainPanel.setMinimumSize(new java.awt.Dimension(705, 330));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(705, 330));

        pnButton.setMinimumSize(new java.awt.Dimension(80, 330));
        pnButton.setName("pnButton"); // NOI18N
        pnButton.setPreferredSize(new java.awt.Dimension(80, 330));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(dijkstra.DijkstraApp.class).getContext().getResourceMap(DijkstraView.class);
        btnNode.setText(resourceMap.getString("btnNode.text")); // NOI18N
        btnNode.setToolTipText(resourceMap.getString("btnNode.toolTipText")); // NOI18N
        btnNode.setName("btnNode"); // NOI18N
        btnNode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNodeMouseClicked(evt);
            }
        });

        btnEdge.setText(resourceMap.getString("btnEdge.text")); // NOI18N
        btnEdge.setToolTipText(resourceMap.getString("btnEdge.toolTipText")); // NOI18N
        btnEdge.setName("btnEdge"); // NOI18N
        btnEdge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEdgeMouseClicked(evt);
            }
        });

        btnStart.setText(resourceMap.getString("btnStart.text")); // NOI18N
        btnStart.setToolTipText(resourceMap.getString("btnStart.toolTipText")); // NOI18N
        btnStart.setName("btnStart"); // NOI18N
        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStartMouseClicked(evt);
            }
        });

        btnEnd.setText(resourceMap.getString("btnEnd.text")); // NOI18N
        btnEnd.setToolTipText(resourceMap.getString("btnEnd.toolTipText")); // NOI18N
        btnEnd.setName("btnEnd"); // NOI18N
        btnEnd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEndMouseClicked(evt);
            }
        });

        btnStep.setText(resourceMap.getString("btnStep.text")); // NOI18N
        btnStep.setToolTipText(resourceMap.getString("btnStep.toolTipText")); // NOI18N
        btnStep.setName("btnStep"); // NOI18N
        btnStep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStepMouseClicked(evt);
            }
        });

        btnSolve.setText(resourceMap.getString("btnSolve.text")); // NOI18N
        btnSolve.setToolTipText(resourceMap.getString("btnSolve.toolTipText")); // NOI18N
        btnSolve.setName("btnSolve"); // NOI18N
        btnSolve.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSolveMouseClicked(evt);
            }
        });

        btnClear.setText(resourceMap.getString("btnClear.text")); // NOI18N
        btnClear.setToolTipText(resourceMap.getString("btnClear.toolTipText")); // NOI18N
        btnClear.setName("btnClear"); // NOI18N
        btnClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClearMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnButtonLayout = new javax.swing.GroupLayout(pnButton);
        pnButton.setLayout(pnButtonLayout);
        pnButtonLayout.setHorizontalGroup(
            pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnNode, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(btnSolve, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(btnStep, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(btnEnd, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(btnEdge, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnButtonLayout.setVerticalGroup(
            pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnButtonLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btnNode, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnEdge, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnEnd, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnStep, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnSolve, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(34, 34, 34))
        );

        pnGraph.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Graph", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        pnGraph.setToolTipText(resourceMap.getString("pnGraph.toolTipText")); // NOI18N
        pnGraph.setFont(resourceMap.getFont("pnGraph.font")); // NOI18N
        pnGraph.setMinimumSize(new java.awt.Dimension(330, 330));
        pnGraph.setName("pnGraph"); // NOI18N
        pnGraph.setPreferredSize(new java.awt.Dimension(330, 330));
        pnGraph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pnGraphMouseReleased(evt);
            }
        });

        jTextStatus.setEditable(false);
        jTextStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextStatus.setText(resourceMap.getString("jTextStatus.text")); // NOI18N
        jTextStatus.setAutoscrolls(false);
        jTextStatus.setBorder(null);
        jTextStatus.setName("jTextStatus"); // NOI18N

        javax.swing.GroupLayout pnGraphLayout = new javax.swing.GroupLayout(pnGraph);
        pnGraph.setLayout(pnGraphLayout);
        pnGraphLayout.setHorizontalGroup(
            pnGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnGraphLayout.createSequentialGroup()
                .addContainerGap(183, Short.MAX_VALUE)
                .addComponent(jTextStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnGraphLayout.setVerticalGroup(
            pnGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGraphLayout.createSequentialGroup()
                .addComponent(jTextStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(288, Short.MAX_VALUE))
        );

        pnSolution.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Solution", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        pnSolution.setToolTipText(resourceMap.getString("pnSolution.toolTipText")); // NOI18N
        pnSolution.setMinimumSize(new java.awt.Dimension(280, 330));
        pnSolution.setName("pnSolution"); // NOI18N
        pnSolution.setPreferredSize(new java.awt.Dimension(280, 330));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jSolution.setColumns(20);
        jSolution.setEditable(false);
        jSolution.setFont(resourceMap.getFont("jSolution.font")); // NOI18N
        jSolution.setLineWrap(true);
        jSolution.setRows(5);
        jSolution.setToolTipText(resourceMap.getString("jSolution.toolTipText")); // NOI18N
        jSolution.setWrapStyleWord(true);
        jSolution.setBorder(null);
        jSolution.setEnabled(false);
        jSolution.setFocusable(false);
        jSolution.setName("jSolution"); // NOI18N
        jScrollPane1.setViewportView(jSolution);

        javax.swing.GroupLayout pnSolutionLayout = new javax.swing.GroupLayout(pnSolution);
        pnSolution.setLayout(pnSolutionLayout);
        pnSolutionLayout.setHorizontalGroup(
            pnSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnSolutionLayout.setVerticalGroup(
            pnSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(pnButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnSolution, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnButton, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
            .addComponent(pnSolution, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
            .addComponent(pnGraph, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText(resourceMap.getString("openMenuItem.text")); // NOI18N
        openMenuItem.setToolTipText(resourceMap.getString("openMenuItem.toolTipText")); // NOI18N
        openMenuItem.setActionCommand(resourceMap.getString("openMenuItem.actionCommand")); // NOI18N
        openMenuItem.setName("openMenuItem"); // NOI18N
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText(resourceMap.getString("saveMenuItem.text")); // NOI18N
        saveMenuItem.setToolTipText(resourceMap.getString("saveMenuItem.toolTipText")); // NOI18N
        saveMenuItem.setName("saveMenuItem"); // NOI18N
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        jSeparator.setName("jSeparator"); // NOI18N
        fileMenu.add(jSeparator);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(dijkstra.DijkstraApp.class).getContext().getActionMap(DijkstraView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        jOpenFileChooser.setFileFilter(new AppFilter());
        jOpenFileChooser.setName("jOpenFileChooser"); // NOI18N

        jSaveFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jSaveFileChooser.setFileFilter(new AppFilter());
        jSaveFileChooser.setName("jSaveFileChooser"); // NOI18N

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNodeMouseClicked

	if (this.alState == StateAlgorithm.UNLOCK) {
	    this.jTextStatus.setText("Draw a node");
	    this.drawType = DrawType.NODES;
	    this.start = false;
	    this.end = false;
	} else {
	    this.jTextStatus.setText("Can't not add, solving...");
	}
    }//GEN-LAST:event_btnNodeMouseClicked

    private void btnEdgeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEdgeMouseClicked

	if (this.alState == StateAlgorithm.UNLOCK) {
	    this.jTextStatus.setText("Draw an edge");
	    this.draw = false;
	    this.drawType = DrawType.EDGES;
	    this.start = false;
	    this.end = false;
	} else {
	    this.jTextStatus.setText("Can't not add, solving...");
	}
    }//GEN-LAST:event_btnEdgeMouseClicked

    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartMouseClicked

	if (this.alState == StateAlgorithm.UNLOCK) {
	    this.drawType = DrawType.NODRAW;
	    this.start = false;
	    this.end = false;
	    if (this.startNode != null) {
		this.jTextStatus.setText("Starting node has been chosen");
		return;
	    }
	    this.jTextStatus.setText("Choose starting node");
	    this.start = true;
	} else
	    this.jTextStatus.setText("Can't not choose, solving...");
    }//GEN-LAST:event_btnStartMouseClicked

    private void btnEndMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEndMouseClicked

	if (this.alState == StateAlgorithm.UNLOCK) {
	    this.drawType = DrawType.NODRAW;
	    this.start = false;
	    this.end = false;
	    if (this.endNode != null) {
		this.jTextStatus.setText("Ending node has been chosen");
		return;
	    }
	    this.jTextStatus.setText("Choose ending node");
	    this.end = true;
	} else {
	    this.jTextStatus.setText("Can't not choose, solving...");
	}
    }//GEN-LAST:event_btnEndMouseClicked

    private void btnStepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStepMouseClicked

	if (this.alState == StateAlgorithm.SOLVED) {
	    this.jTextStatus.setText("Solved");
	    return;
	} else if (this.alState == StateAlgorithm.LOCK) {
	    this.jTextStatus.setText("Solving...");
	    this.dijkstraAlgorithm();
	    this.showResult();
	} else if (this.alState == StateAlgorithm.UNLOCK) {
	    this.drawType = DrawType.NODRAW;
	    this.start = false;
	    this.end = false;
	    if (this.startNode == null) {
		this.jTextStatus.setText("Not chosen start node yet");
		return;
	    }
	    if (this.endNode == null) {
		this.jTextStatus.setText("Not chosen end node yet");
		return;
	    }

	    this.jTextStatus.setText("Solving...");
	    this.heap = new FibonacciHeap();
	    this.heap.insertVertex(this.startNode);
	    this.alState = StateAlgorithm.LOCK;
	    this.dijkstraAlgorithm();
	    this.showResult();
	}
    }//GEN-LAST:event_btnStepMouseClicked

    private void btnSolveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSolveMouseClicked

	if (this.alState == StateAlgorithm.SOLVED) {
	    this.jTextStatus.setText("Solved");
	    return;
	}
	else if (this.alState == StateAlgorithm.UNLOCK) {
	    this.drawType = DrawType.NODRAW;
	    this.start = false;
	    this.end = false;
	    if (this.startNode == null) {
		this.jTextStatus.setText("Not chosen start node yet");
		return;
	    }
	    if (this.endNode == null) {
		this.jTextStatus.setText("Not chosen end node yet");
		return;
	    }

	    this.jTextStatus.setText("Solving...");
	    this.heap = new FibonacciHeap();
	    this.heap.insertVertex(this.startNode);
	}
	while (this.alState != StateAlgorithm.SOLVED) {
	    this.dijkstraAlgorithm();
	    this.showResult();
	}
    }//GEN-LAST:event_btnSolveMouseClicked

    private void btnClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearMouseClicked

	this.clearAll();
    }//GEN-LAST:event_btnClearMouseClicked

    private void pnGraphMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnGraphMouseReleased

	int x = 0;
	int y = 0;
	Node node = null;
	if (this.drawType != DrawType.NODRAW || this.start || this.end) {
	    x = evt.getX() - jPaintPanel.radius/2;
	    y = evt.getY() - jPaintPanel.radius/2;
	    if (x < 0 || y < 0) {
		this.jTextStatus.setText("Invalid position");
		this.drawType = DrawType.NODRAW;
		return;
	    }
	    node = this.pnGraph.checkInNode(x, y);
	    if (node != null)
		if (node.state != State.LABELED) {
		    if (this.start) {
			node.state = State.LABELED;
			node.setKey(0);
			this.startNode = node;
			this.jSolution.append("Starting node\t: Node " + Integer.toString(node.getData()) + "\n");
			this.start = false;
		    } else if (this.end) {
			this.endNode = node;
			this.jSolution.append("Ending node\t: Node " + Integer.toString(node.getData()) + "\n");
			this.end = false;
		    }
		    this.pnGraph.repaint();
		}
	}

	if (this.drawType == DrawType.NODES) {
	    if (node != null) {
		this.jTextStatus.setText("Concurred with another node");
	    } else {
		this.pnGraph.listNodes.add(new Node(x, y, this.numNodes, -1));
		this.pnGraph.repaint();
		this.numNodes++;
		this.jTextStatus.setText("");
	    }
	    this.drawType = DrawType.NODRAW;
	} else if (this.drawType == DrawType.EDGES){
	    if (node == null) {
		this.jTextStatus.setText("You must click on exist nodes");
		this.drawType = DrawType.NODRAW;
	    } else if (node == this.head) {
		this.jTextStatus.setText("You must choose another node");
	    } else {
		if (draw) {
		    Edge edge = new Edge(this.head, node, 10);
		    edge.edgeType = this.pnGraph.checkEdge(this.head, node);
		    edge.setLength(Integer.parseInt(JOptionPane.showInputDialog(null, "Length of edge", "Edge", JOptionPane.QUESTION_MESSAGE)));
		    this.head.outgoingEdges.add(edge);
		    node.incomingEdges.add(edge);
		    this.pnGraph.listEdges.add(edge);
		    this.pnGraph.repaint();
		    this.head = null;
		    this.drawType = DrawType.NODRAW;
		    this.jTextStatus.setText("");
		    this.draw = false;
		} else {
		    this.head = node;
		    this.jTextStatus.setText("Choose tail node");
		    this.draw = true;
		}
	    }
	}
    }//GEN-LAST:event_pnGraphMouseReleased

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed

	this.jTextStatus.setText("");
	if (this.jOpenFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
	    File file = this.jOpenFileChooser.getSelectedFile();
	    this.clearAll();
	    try {
		BufferedReader input = new BufferedReader(new FileReader(file));
		try {
		    String line = null;
		    line = input.readLine();
		    while (line != null) {
			String splitLine[] = line.split(":");
			if (splitLine[0].equals("Node")) {
			    int d = Integer.parseInt(splitLine[1]);
			    int x = Integer.parseInt(splitLine[2]);
			    int y = Integer.parseInt(splitLine[3]);
			    this.pnGraph.listNodes.add(new Node(x, y, d, -1));
			} else if (splitLine[0].equals("Edge")) {
			    Node headNode = this.pnGraph.listNodes.get(Integer.parseInt(splitLine[1]));
			    Node tailNode = this.pnGraph.listNodes.get(Integer.parseInt(splitLine[2]));
			    int l = Integer.parseInt(splitLine[3]);
			    Edge edge = new Edge( headNode, tailNode, l);
			    headNode.outgoingEdges.add(edge);
			    tailNode.incomingEdges.add(edge);
			    this.pnGraph.listEdges.add(edge);
			}
			line = input.readLine();
		    }
		    this.jTextStatus.setText("Load graph successfully");
		} finally {
		    input.close();
		}
	    } catch (IOException e) {
	    }
	}
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed

	this.jTextStatus.setText("");
	if (this.pnGraph.listEdges.isEmpty() && this.pnGraph.listNodes.isEmpty()) {
	    this.jTextStatus.setText("Empty graph, not save");
	    return;
	}
	if (this.jSaveFileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
	    File file = this.jSaveFileChooser.getSelectedFile();
	    try {
		BufferedWriter output = new BufferedWriter(new FileWriter(file));
		try {
		    for (Node node : this.pnGraph.listNodes) {
			output.write(String.format("Node:%d:%d:%d", node.getData(), node.getX_cor(), node.getY_cor()));
			output.newLine();
		    }
		    for (Edge edge : this.pnGraph.listEdges) {
			output.write(String.format("Edge:%d:%d:%d", edge.getHead().getData(), edge.getTail().getData(), edge.getLength()));
			output.newLine();
		    }
		    this.jTextStatus.setText("Save graph successfully");
		} finally {
		    output.close();
		}
	    } catch (IOException e) {
	    }
	}
    }//GEN-LAST:event_saveMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEdge;
    private javax.swing.JButton btnEnd;
    private javax.swing.JButton btnNode;
    private javax.swing.JButton btnSolve;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStep;
    private javax.swing.JFileChooser jOpenFileChooser;
    private javax.swing.JFileChooser jSaveFileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator;
    private javax.swing.JTextArea jSolution;
    private javax.swing.JTextField jTextStatus;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JPanel pnButton;
    /*
    private javax.swing.JPanel pnGraph;
    */private jPaintPanel pnGraph;
    private javax.swing.JPanel pnSolution;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    private JDialog aboutBox;

    private int numNodes = 0;
    // for draw
    private boolean draw = false;
    private Node head = null;
    private DrawType drawType = DrawType.NODRAW;
    // for function choose start and end node
    private boolean start = false;
    private boolean end = false;
    private Node startNode = null;
    private Node endNode = null;
    // for algorithm
    private StateAlgorithm alState = StateAlgorithm.UNLOCK;
    private FibonacciHeap heap = null;
    private Node curNode = null;
    private Edge curEdge = null;
    private int curPos = 0;

    private void clearAll() {
	this.pnGraph.listNodes.clear();
	this.pnGraph.listEdges.clear();
	this.pnGraph.showResult = false;
	this.jTextStatus.setText("");
	this.pnGraph.repaint();
	this.jSolution.setText("");
	this.draw = false;
	this.end = false;
	this.start = false;
	this.head = null;
	this.startNode = null;
	this.endNode = null;
	this.numNodes = 0;
	this.drawType = DrawType.NODRAW;
	this.alState = StateAlgorithm.UNLOCK;
	this.heap = null;
	this.curNode = null;
	this.curEdge = null;
	this.curPos = 0;
    }

    private void dijkstraAlgorithm() {
	// check solved
	if (this.alState == StateAlgorithm.SOLVED)
	    return;
	// first time run
	if (this.curNode == null) {
	    this.curNode = this.heap.deleteMin();
	    this.curNode.state = State.SCANNED;
	    this.curPos = 0;
	}
	int sz = this.curNode.outgoingEdges.size();
	if (this.curPos < sz) {
	    if (this.curEdge != null)
		this.curEdge.edgeState = State.UNLABELED;
	    this.curEdge = this.curNode.outgoingEdges.get(this.curPos);
	    this.curEdge.edgeState = State.SCANNED;
	    Node tailOfCurNode = this.curEdge.getTail();
	    
	    if (tailOfCurNode.state != State.SCANNED) {
		if (tailOfCurNode.state == State.UNLABELED) {
		    // insert a vertex with infinite key
		    tailOfCurNode.state = State.LABELED;
		    tailOfCurNode.setPred(this.curNode);
		    tailOfCurNode.setKey(this.curNode.getKey() + this.curEdge.getLength());
		    this.heap.insertVertex(tailOfCurNode);
		} else if (tailOfCurNode.getKey() > this.curNode.getKey() + this.curEdge.getLength()) {
		    // decrease the key of a vertex with finite key
		    tailOfCurNode.setPred(this.curNode);
		    this.heap.decreaseKey(this.curNode.getKey() + this.curEdge.getLength(), tailOfCurNode);
		}
	    }
	    // check next outgoing edge
	    this.curPos++;
	} else if (!this.heap.isEmpty()) {
	    this.curNode = this.heap.deleteMin();
	    this.curNode.state = State.SCANNED;
	    this.curPos = 0;
	} else
	    this.alState = StateAlgorithm.SOLVED;
	this.pnGraph.repaint();
    }

    private void showResult() {
	if (this.alState != StateAlgorithm.SOLVED)
	    return;

	this.pnGraph.showResult = true;
	this.endNode.state = State.LABELED;
	this.startNode.state = State.LABELED;
	this.curEdge.edgeState = State.UNLABELED;
	this.jTextStatus.setText("Solved");

  	if (this.endNode.getPred() == null) {
	    this.jSolution.append("There is no shorttest path from Node " + Integer.toString(this.startNode.getData())
			+ " to Node " + Integer.toString(this.endNode.getData()) + "\n");
	} else {
	    this.jSolution.append("Path:\n");
	    ArrayList<Node> result = new ArrayList<Node>();
	    Node tailN = this.endNode;
	    do {
		Node headN = tailN.getPred();
		if (headN == null) break;
		headN.state = State.LABELED;
		tailN.getIncomingEdge(headN).edgeState = State.LABELED;
		result.add(tailN);
		tailN = headN;
	    } while (tailN != null);
	    for (int i = result.size() - 1; i > 0; i--)
		this.jSolution.append(" Node " + Integer.toString(result.get(i).getData()) + " ->");
	    this.jSolution.append(" Node " + Integer.toString(result.get(0).getData()) + "\n");
	    this.jSolution.append("\tDistance: " + Integer.toString(this.endNode.getKey()));
	    this.pnGraph.repaint();
	    this.pnSolution.repaint();
	}
    }

}
